{"version":3,"file":"index.es.js","sources":["../src/dom-helper.js","../src/index.js"],"sourcesContent":["const stripHtml = element => element.innerHTML.replace(/<[^>]*>?/gm, '')\n\nconst parseStrDimensionToInt = elementSize => parseInt(elementSize, 10)\n\nconst getOffset = el => {\n  var rect = el.getBoundingClientRect()\n\n  return {\n    top: rect.top + document.body.scrollTop,\n    left: rect.left + document.body.scrollLeft\n  }\n}\n\nconst index = element => {\n  let children = element.parentNode.childNodes\n  let num = 0\n  for (var i = 0; i < children.length; i++) {\n    if (children[i] === element) return num\n    if (children[i].nodeType === 1) num++\n  }\n  return -1\n}\n\nconst addClass = (element, className) => {\n  if (element.classList) element.classList.add(className)\n  else element.className += ' ' + className\n}\n\nconst removeClass = (element, className) => {\n  if (element.classList) element.classList.remove(className)\n  else {\n    element.className = element.className.replace(\n      new RegExp('(^|\\\\b)' + className.split(' ').join('|') + '(\\\\b|$)', 'gi'),\n      ' '\n    )\n  }\n}\n\nconst hasClass = (element, className) => {\n  if (element.classList) return element.classList.contains(className)\n  else return new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className)\n}\n\nconst findFirstChildWithClassName = (element, className) => {\n  const matches = element.getElementsByClassName(className)\n\n  if (matches && matches.length > 0) return matches[0]\n\n  return null\n}\n\nconst findChildrenWithClassName = (parentElement, className) => {\n  return parentElement.getElementsByClassName(className)\n}\n\nconst getHiddenElementOuterHeight = element => {\n  element.style.visibility = 'hidden'\n  element.style.display = 'block'\n  let elementHeight = element.offsetHeight\n  element.style.display = 'none'\n  element.style.visibility = 'visible'\n\n  return elementHeight\n}\n\nconst getHiddenElementOuterWidth = element => {\n  element.style.visibility = 'hidden'\n  element.style.display = 'block'\n  let elementWidth = element.offsetWidth\n  element.style.display = 'none'\n  element.style.visibility = 'visible'\n\n  return elementWidth\n}\n\nconst getElementWidth = el => {\n  let width = el.offsetWidth\n  let style = getComputedStyle(el)\n\n  width -=\n    parseFloat(style.paddingLeft) +\n    parseFloat(style.paddingRight) +\n    parseFloat(style.borderLeftWidth) +\n    parseFloat(style.borderRightWidth)\n\n  return width\n}\n\nconst getElementHeight = el => {\n  let height = el.offsetHeight\n  let style = getComputedStyle(el)\n\n  height -=\n    parseFloat(style.paddingTop) +\n    parseFloat(style.paddingBottom) +\n    parseFloat(style.borderTopWidth) +\n    parseFloat(style.borderBottomWidth)\n\n  return height\n}\n\nexport default {\n  stripHtml,\n  parseStrDimensionToInt,\n  getOffset,\n  index,\n  addClass,\n  removeClass,\n  hasClass,\n  getHiddenElementOuterHeight,\n  getHiddenElementOuterWidth,\n  findFirstChildWithClassName,\n  findChildrenWithClassName,\n  getElementWidth,\n  getElementHeight\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport DomHelper from './dom-helper'\nimport './styles.scss'\n\nexport const DragMode = {\n  REORDER: 'reorder',\n  SWAP: 'swap'\n}\n\n/**\n * Generate UuId\n * */\nconst generateUuid = () => {\n  let uuid = ''\n  let i\n  let random\n  for (i = 0; i < 32; i++) {\n    random = (Math.random() * 16) | 0\n\n    if (i === 8 || i === 12 || i === 16 || i === 20) {\n      uuid += '-'\n    }\n    uuid += (i === 12 ? 4 : i === 16 ? (random & 3) | 8 : random).toString(16)\n  }\n\n  return uuid\n}\n\nexport default Component => {\n  const wrapper = class RTFixedDraggableColumn extends React.Component {\n    getWrappedInstance() {\n      if (!this.wrappedInstance) console.warn('RTDraggableColumn - No wrapped instance')\n      if (this.wrappedInstance.getWrappedInstance) return this.wrappedInstance.getWrappedInstance()\n      else return this.wrappedInstance\n    }\n\n    containerRef = React.createRef();\n    currentColumnOrder = [];\n\n    constructor(props) {\n      super(props)\n      this.dragged = null\n      this.reorder = []\n      this.state = {\n        trigger: 0,\n        firstLoad: true\n      }\n    }\n\n    // helper methods\n    findParentHeader(element) {\n      if (element.className.includes('rt-th')) {\n        return element\n      } else {\n        let parent = element.parentElement\n        while (!parent.className.includes('rt-th')) {\n          parent = parent.parentElement\n          if (!parent) break\n        }\n        return parent\n      }\n    }\n    // end helper methods\n\n    createDragEvents() {\n      const headersCollection = DomHelper.findChildrenWithClassName(\n        this.containerRef.current,\n        `draggable-header`\n      )\n\n      // convert HTML collection to Javascript array\n      const headers = [...headersCollection]\n\n      headers.forEach((header, i) => {\n        // only allow drag events on drag enabled columns\n        if (header.className.includes('enable-drag')) {\n          const headerParent = header.parentNode\n\n          const {\n            draggableColumns: { enableColumnWideDrag = defaultProps.enableColumnWideDrag }\n          } = this.props\n\n          if (enableColumnWideDrag) {\n            headerParent.setAttribute('draggable', true)\n          } else {\n            header.setAttribute('draggable', true)\n            DomHelper.addClass(headerParent, 'transparent-border')\n          }\n\n          // ondragstart event\n          headerParent.ondragstart = e => {\n            e.stopPropagation()\n\n            const {\n              draggableColumns: {\n                disableTableScroll,\n                useDragImage = defaultProps.useDragImage,\n                dragImageClassName = defaultProps.dragImageClassName\n              }\n            } = this.props\n\n            if (disableTableScroll) {\n              const tableBody = DomHelper.findFirstChildWithClassName(\n                this.containerRef.current,\n                'rt-table'\n              )\n\n              if (tableBody) {\n                tableBody.style.overflow = 'hidden'\n              }\n            }\n\n            // counter used as a workaround for dragleave event fired when hovering over a child element\n            this.counter = 0\n            this.dragged = i\n            this.draggedName = DomHelper.stripHtml(headerParent)\n            this.draggedColumn = this.findParentHeader(headerParent)\n\n            this.iconWidth = DomHelper.getHiddenElementOuterWidth(this.reorderIndicatorUp)\n            this.iconHeight = DomHelper.getHiddenElementOuterHeight(this.reorderIndicatorUp)\n\n            e.dataTransfer.setData('text', 'b') // Firefox requires this to make dragging possible\n\n            if (useDragImage) {\n              const crt = this.draggedColumn.cloneNode(true)\n\n              crt.className = dragImageClassName\n              const columnWidth = DomHelper.getElementWidth(this.draggedColumn)\n              const columnHeight = DomHelper.getElementHeight(this.draggedColumn)\n\n              // calculate offset from draggedColumn element\n              let xOffSet = Math.floor(columnWidth / 2)\n              const yOffSet = Math.floor(columnHeight / 2)\n\n              // max-width of 150px, otherwise it looks blurry in Chrome (Windows)\n              if (columnWidth > 150) {\n                crt.style.width = '150px'\n                xOffSet = 150 / 2\n              }\n\n              crt.style.position = 'absolute'\n              crt.style.top = '-1000px'\n\n              document.body.appendChild(crt)\n              e.dataTransfer.effectAllowed = 'move'\n              e.dataTransfer.setDragImage(crt, xOffSet, yOffSet)\n\n              // set refernce to cloned Node\n              this.clone = crt\n            }\n          }\n\n          // ondrag event\n          headerParent.ondrag = e => {\n            e.stopPropagation()\n          }\n\n          headerParent.ondragenter = e => {\n            e.stopPropagation()\n            e.preventDefault()\n            this.counter++\n\n            if (DomHelper.stripHtml(e.target) !== this.draggedName) {\n              const {\n                draggableColumns: {\n                  mode = defaultProps.mode,\n                  onDragEnterClassName = defaultProps.onDragEnterClassName\n                }\n              } = this.props\n\n              if (mode === DragMode.SWAP && onDragEnterClassName) {\n                const dropHeader = this.findParentHeader(e.target)\n                DomHelper.addClass(dropHeader.firstChild, onDragEnterClassName)\n              }\n            }\n          }\n\n          // ondragover event\n          headerParent.ondragover = e => {\n            e.preventDefault()\n\n            // prevent bug when using multiple react tables\n            if (!this.draggedColumn) return\n\n            const {\n              draggableColumns: { mode = defaultProps.mode }\n            } = this.props\n\n            const dropHeader = this.findParentHeader(e.target)\n\n            // in reorder mode only\n            if (mode === DragMode.REORDER) {\n              if (DomHelper.stripHtml(e.target) !== this.draggedName) {\n                const containerOffset = DomHelper.getOffset(this.containerRef.current)\n                const dropHeaderOffset = DomHelper.getOffset(dropHeader)\n                const targetLeft = dropHeaderOffset.left - containerOffset.left\n                const columnCenter = dropHeaderOffset.left + dropHeader.offsetWidth / 2\n\n                const tableBodyBoundingRec = DomHelper.findFirstChildWithClassName(\n                  this.containerRef.current,\n                  'rt-table'\n                ).getBoundingClientRect()\n\n                // determine current table viewport\n                const maxVisibleXPos = tableBodyBoundingRec.right\n                const minVisibleXPos = 0 - Math.ceil(this.iconWidth / 2)\n\n                this.reorderIndicatorUp.style.top =\n                  dropHeaderOffset.top - containerOffset.top - (this.iconHeight + 3) + 'px'\n\n                this.reorderIndicatorDown.style.top =\n                  dropHeaderOffset.top - containerOffset.top + dropHeader.offsetHeight + 3 + 'px'\n\n                if (e.pageX > columnCenter) {\n                  this.reorderIndicatorUp.style.left =\n                    targetLeft + dropHeader.offsetWidth - Math.ceil(this.iconWidth / 2) + 'px'\n                  this.reorderIndicatorDown.style.left =\n                    targetLeft + dropHeader.offsetWidth - Math.ceil(this.iconWidth / 2) + 'px'\n                  this.dropPosition = 1\n                } else {\n                  this.reorderIndicatorUp.style.left =\n                    targetLeft - Math.ceil(this.iconWidth / 2) + 'px'\n                  this.reorderIndicatorDown.style.left =\n                    targetLeft - Math.ceil(this.iconWidth / 2) + 'px'\n\n                  this.dropPosition = -1\n                }\n\n                if (\n                  DomHelper.parseStrDimensionToInt(this.reorderIndicatorUp.style.left) >\n                    maxVisibleXPos ||\n                  DomHelper.parseStrDimensionToInt(this.reorderIndicatorUp.style.left) <\n                    minVisibleXPos\n                ) {\n                  // do not show indicators if position is outside leftmost or rightmost bounds of the react table\n                  this.reorderIndicatorUp.style.display = 'none'\n                  this.reorderIndicatorDown.style.display = 'none'\n                } else {\n                  this.reorderIndicatorUp.style.display = 'block'\n                  this.reorderIndicatorDown.style.display = 'block'\n                  this.reorderIndicatorUp.style.zIndex = 50\n                  this.reorderIndicatorDown.style.zIndex = 50\n                }\n              }\n            }\n          }\n\n          headerParent.ondragleave = e => {\n            e.preventDefault()\n\n            this.counter--\n\n            const {\n              draggableColumns: {\n                mode = defaultProps.mode,\n                onDragEnterClassName = defaultProps.onDragEnterClassName\n              }\n            } = this.props\n\n            if (mode === DragMode.REORDER) {\n              if (this.counter === 0) {\n                this.reorderIndicatorUp.style.display = 'none'\n                this.reorderIndicatorDown.style.display = 'none'\n              }\n            } else if (mode === DragMode.SWAP) {\n              if (this.counter === 0 && onDragEnterClassName) {\n                const dropHeader = this.findParentHeader(e.target)\n                DomHelper.removeClass(dropHeader.firstChild, onDragEnterClassName)\n              }\n            }\n          }\n\n          // ondrop event\n          headerParent.ondrop = e => {\n            e.preventDefault()\n\n            // prevent bug when using multiple react tables\n            if (!this.draggedColumn) return\n\n            const {\n              draggableColumns: { mode = defaultProps.mode, onDropSuccess }\n            } = this.props\n\n            if (mode === DragMode.REORDER) {\n              // only move if the dragged column is meets position threshold\n              let dragIndex = DomHelper.index(this.draggedColumn)\n              let dropIndex = DomHelper.index(this.findParentHeader(e.target))\n              let allowDrop = dragIndex !== dropIndex\n\n              if (\n                allowDrop &&\n                ((dropIndex - dragIndex === 1 && this.dropPosition === -1) ||\n                  (dragIndex - dropIndex === 1 && this.dropPosition === 1))\n              ) {\n                allowDrop = false\n              }\n\n              if (allowDrop) {\n                // readjust dropIndex value for edge cases\n                // if dragging a column from left to right\n                if (this.dragged < dropIndex) {\n                  if (this.dropPosition === -1) {\n                    dropIndex = dropIndex - 1\n                  }\n                } else {\n                  // dragging a column from right to left\n                  if (this.dropPosition === 1) {\n                    dropIndex = dropIndex + 1\n                  }\n                }\n\n                this.reorder = { a: dropIndex, b: this.dragged }\n\n                if (onDropSuccess) {\n                  const containerOffset = DomHelper.getOffset(this.containerRef.current)\n\n                  // adjust offSets to be respective to the containerOffset\n                  const oldOffset = DomHelper.getOffset(this.draggedColumn)\n                  oldOffset.top = oldOffset.top - containerOffset.top\n                  oldOffset.left = oldOffset.left - containerOffset.left\n\n                  const newOffset = DomHelper.getOffset(this.findParentHeader(e.target))\n                  newOffset.top = newOffset.top - containerOffset.top\n                  newOffset.left = newOffset.left - containerOffset.left\n\n                  // (draggedColumn, targetColumn, oldIndex, newIndex, oldOffset, newOffset)\n                  onDropSuccess(\n                    this.reorder,\n                    this.currentColumnOrder[this.dragged],\n                    this.currentColumnOrder[dropIndex],\n                    this.dragged,\n                    dropIndex,\n                    oldOffset,\n                    newOffset\n                  )\n\n                  this.reorder = []\n                }\n\n                // trigger a re-render\n                this.setState({ trigger: Math.random(), firstLoad: false })\n              }\n            } else if (mode === DragMode.SWAP) {\n              this.reorder = { a: i, b: this.dragged }\n\n              if (onDropSuccess) {\n                // (draggedColumn, targetColumn, oldIndex, newIndex)\n                onDropSuccess(\n                  this.reorder,\n                  this.currentColumnOrder[this.dragged],\n                  this.currentColumnOrder[i],\n                  this.dragged,\n                  i\n                )\n\n                this.reorder = []\n              }\n\n              // trigger a re-render\n              this.setState({ trigger: Math.random(), firstLoad: false })\n            }\n\n            this.dragged = null\n            this.draggedName = null\n            this.draggedColumn = null\n            this.dropPosition = null\n            this.counter = 0\n            this.reorderIndicatorUp.style.display = 'none'\n            this.reorderIndicatorDown.style.display = 'none'\n          }\n\n          // ondragend event\n          headerParent.ondragend = e => {\n            const {\n              draggableColumns: { disableTableScroll, overflow }\n            } = this.props\n\n            e.stopPropagation()\n\n            if (this.clone) {\n              document.body.removeChild(this.clone)\n              this.clone = null\n            }\n\n            if (disableTableScroll) {\n              const tableBody = DomHelper.findFirstChildWithClassName(\n                this.containerRef.current,\n                'rt-table'\n              )\n\n              if (tableBody) {\n                tableBody.style.overflow = overflow || defaultProps.overflow\n              }\n            }\n          }\n        }\n      })\n    }\n\n    componentDidMount() {\n      if (this.props.draggableColumns.draggable.length > 0) this.createDragEvents()\n    }\n\n    componentDidUpdate() {\n      if (this.props.draggableColumns.draggable.length > 0) this.createDragEvents()\n    }\n\n    // prevent side effects such as accidentally resizing column while dragging a column\n    stopPropagation = e => {\n      e.stopPropagation()\n    };\n\n    render() {\n      const { columns, draggableColumns, ...rest } = this.props\n      const {\n        draggable = defaultProps.draggable,\n        mode = defaultProps.mode,\n        onDraggedColumnChange,\n        reorderIndicatorUpClassName = defaultProps.reorderIndicatorUpClassName,\n        reorderIndicatorDownClassName = defaultProps.reorderIndicatorDownClassName\n      } = draggableColumns\n\n      let reorderIndicatorUp = (\n        <span\n          ref={el => {\n            this.reorderIndicatorUp = el\n          }}\n          className={`arrow arrow-bar is-top ${reorderIndicatorUpClassName}`}\n          style={{ position: 'absolute', display: 'none' }}\n        />\n      )\n\n      let reorderIndicatorDown = (\n        <span\n          ref={el => {\n            this.reorderIndicatorDown = el\n          }}\n          className={`arrow arrow-bar is-bottom ${reorderIndicatorDownClassName}`}\n          style={{ position: 'absolute', display: 'none' }}\n        />\n      )\n\n      const cols = columns.map(col => {\n        return {\n          ...col,\n          Header:\n            typeof col.Header === 'function' ? (\n              <div onClick={this.stopPropagation}>\n                {col.Header()}\n              </div>\n            ) : (\n              <div onClick={this.stopPropagation}>\n                {col.Header}\n              </div>\n            )\n        }\n      })\n\n      // run all reorder events\n      //   if (mode && mode === DragMode.SWAP) {\n      //     this.reorder.forEach(o => (cols[o.a] = cols.splice(o.b, 1, cols[o.a])[0]))\n      //   } else {\n      //     // mode: reorder - default\n      //     this.reorder.forEach(o => cols.splice(o.a, 0, cols.splice(o.b, 1)[0]))\n      //   }\n\n      // track final column order\n      this.currentColumnOrder = cols\n\n      // fire change event?\n      if (!this.state.firstLoad) {\n        const originalOrder = columns.map(col => {\n          if (typeof col.accessor === 'function') return col.id\n          return col.accessor\n        })\n\n        const newOrder = cols.map(col => {\n          if (typeof col.accessor === 'function') return col.id\n          return col.accessor\n        })\n\n        // if order is not equal, then call onDraggedColumnChange prop\n        if (JSON.stringify(originalOrder) !== JSON.stringify(newOrder)) {\n          if (onDraggedColumnChange) onDraggedColumnChange(cols)\n        }\n      }\n\n      // render\n      return (\n        <div\n          className='rt-draggable-container'\n          ref={this.containerRef}\n          style={{ position: 'relative' }}\n        >\n          <Component\n            {...rest}\n            draggableColumns={draggableColumns}\n            columns={cols}\n            ref={r => (this.wrappedInstance = r)}\n          />\n          {reorderIndicatorUp}\n          {reorderIndicatorDown}\n        </div>\n      )\n    }\n  }\n\n  const defaultProps = {\n    mode: DragMode.REORDER,\n    draggable: [],\n    enableColumnWideDrag: true,\n    disableTableScroll: false,\n    overflow: 'auto',\n    useDragImage: true,\n    dragImageClassName: 'rt-dragged-item',\n    onDragEnterClassName: 'rt-drag-enter-item',\n    reorderIndicatorUpClassName: '',\n    reorderIndicatorDownClassName: ''\n  }\n\n  wrapper.displayName = 'RTDraggableColumn'\n\n  wrapper.propTypes = {\n    draggableColumns: PropTypes.shape({\n      /** mode to either reorder the column or swap column position on drop */\n      mode: PropTypes.oneOf([DragMode.REORDER, DragMode.SWAP]).isRequired,\n      /** array of column accessors to allow drag and drop */\n      draggable: PropTypes.arrayOf(PropTypes.string),\n      /** if {true} then entire header column is draggable.  If {false} then only header column text is draggable.\n       * Set to {false} if you experience buggyness when using with react-table column sorting/resizing functionality\n       */\n      enableColumnWideDrag: PropTypes.bool,\n      /** disable ReactTable horizontal/vertical scrolling when dragging a column */\n      disableTableScroll: PropTypes.bool,\n      /** used with disableTableScroll={true} to reset ReactTable overflow style onDragEnd event */\n      overflow: PropTypes.string,\n      /** clone dragged column?  useful for applying a different css class */\n      useDragImage: PropTypes.bool,\n      /** dragImageClassName only applies when useDragImage={true} */\n      dragImageClassName: PropTypes.string,\n      /** Swap mode only - css class */\n      onDragEnterClassName: PropTypes.string,\n      /** callback method to be notified when on column drop success - signature: function(draggedColumn, targetColumn, oldIndex, newIndex, oldOffset, newOffset)  */\n      onDropSuccess: PropTypes.func,\n      /** callback method to be notified when column order changes - signature: function(columns)  */\n      onDraggedColumnChange: PropTypes.func,\n      /** additional className for reorder indicator Up */\n      reorderIndicatorUpClassName: PropTypes.string,\n      /** additional className for reorder indicator Down */\n      reorderIndicatorDownClassName: PropTypes.string\n    })\n  }\n\n  return wrapper\n}\n"],"names":["stripHtml","element","innerHTML","replace","parseStrDimensionToInt","parseInt","elementSize","getOffset","rect","el","getBoundingClientRect","top","document","body","scrollTop","left","scrollLeft","index","children","parentNode","childNodes","num","i","length","nodeType","addClass","className","classList","add","removeClass","remove","RegExp","split","join","hasClass","contains","test","findFirstChildWithClassName","matches","getElementsByClassName","findChildrenWithClassName","parentElement","getHiddenElementOuterHeight","style","visibility","display","elementHeight","offsetHeight","getHiddenElementOuterWidth","elementWidth","offsetWidth","getElementWidth","width","getComputedStyle","parseFloat","paddingLeft","paddingRight","borderLeftWidth","borderRightWidth","getElementHeight","height","paddingTop","paddingBottom","borderTopWidth","borderBottomWidth","DragMode","wrapper","wrappedInstance","console","warn","getWrappedInstance","props","containerRef","React","createRef","currentColumnOrder","stopPropagation","dragged","reorder","state","includes","parent","headersCollection","DomHelper","current","headers","forEach","header","headerParent","draggableColumns","enableColumnWideDrag","defaultProps","setAttribute","ondragstart","disableTableScroll","useDragImage","dragImageClassName","tableBody","overflow","counter","draggedName","draggedColumn","findParentHeader","iconWidth","reorderIndicatorUp","iconHeight","dataTransfer","setData","crt","cloneNode","columnWidth","columnHeight","xOffSet","Math","floor","yOffSet","position","appendChild","effectAllowed","setDragImage","clone","ondrag","ondragenter","preventDefault","e","target","mode","onDragEnterClassName","SWAP","dropHeader","firstChild","ondragover","REORDER","containerOffset","dropHeaderOffset","targetLeft","columnCenter","tableBodyBoundingRec","maxVisibleXPos","right","minVisibleXPos","ceil","reorderIndicatorDown","pageX","dropPosition","zIndex","ondragleave","ondrop","onDropSuccess","dragIndex","dropIndex","allowDrop","a","b","oldOffset","newOffset","setState","trigger","random","firstLoad","ondragend","removeChild","draggable","createDragEvents","columns","rest","onDraggedColumnChange","reorderIndicatorUpClassName","reorderIndicatorDownClassName","cols","map","col","Header","originalOrder","accessor","id","newOrder","JSON","stringify","r","Component","displayName","propTypes","PropTypes","shape","oneOf","isRequired","arrayOf","string","bool","func"],"mappings":"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"}